RE_CHANNEL = Regex('iplayer/live/([^/]+)')

TV_CHANNEL_LOOKUP = {
    "bbcone": {"live_id" : "bbc1"},
    "bbctwo": {"live_id" : "bbc2"},
    "bbcthree": {"live_id" : "bbc3"},
    "bbcfour": {"live_id" : "bbc4"},
    "cbbc": {"live_id" : "cbbc"},
    "cbeebies": {"live_id" : "cbeebies"},
    "bbcnews": {"live_id" : "news_ch"},
    "bbcparliament": {"live_id" : "parliament"},
    "bbcalba": {"live_id" : "alba"}
}

##########################################################################################
def NormalizeURL(url):
    return url

##########################################################################################
def MetadataObjectForURL(url):
    element = HTML.ElementFromURL(url, cacheTime = 0)

    for on_air_info in element.xpath("//*[@id = 'nownext']//*[@id = 'now']"):
        try:
            pid = on_air_info.xpath(".//a/@href")[0].split("/")[-1]
        except:
            break
        
        program_url = 'http://www.bbc.co.uk/iplayer/episode/%s' % pid
        
        mdo = URLService.MetadataObjectForURL(program_url)
        mdo.title = "Live: " + mdo.title
        
        return mdo
        
    return Ex.LiveMediaNotStarted

##########################################################################################
def MediaObjectsForURL(url):
    match = RE_CHANNEL.search(url)
    if match:
        channel = match.groups()[0]
        
        return [
            MediaObject(
                parts = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayVideo, channel = channel))
                    )
                ],
                video_resolution = 360,
                audio_channels = 2,
                optimized_for_streaming = True
            )
        ]

##########################################################################################
@indirect
def PlayVideo(channel):
    live_id = TV_CHANNEL_LOOKUP[channel]["live_id"]
    base    = String.Decode('aHR0cDovL2EuZmlsZXMuYmJjaS5jby51ay9tZWRpYS9saXZlL21hbmlmZXN0cy9obHMvaGR0di9hay8lcy5tM3U4')

    try:
        hls_url = base % live_id
        headers = HTTP.Request(hls_url).headers
    except:
        raise Ex.MediaGeoblocked

    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(url = hls_url)
    )
