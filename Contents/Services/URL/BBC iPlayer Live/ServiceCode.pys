RE_CHANNEL = Regex('iplayer/live/([^/]+)')

TV_CHANNEL_LOOKUP = {
    "bbcone": {"img_id" : "bbc_one", "live_id" : "bbc1"},
    "bbctwo": {"img_id" : "bbc_two", "live_id" : "bbc2"},
    "bbcthree": {"img_id" : "bbc_three", "live_id" : "bbc3"},
    "bbcfour": {"img_id" : "bbc_four", "live_id" : "bbc4"},
    "cbbc": {"img_id" : "cbbc", "live_id" : "cbbc"},
    "cbeebies": {"img_id" : "cbeebies_1", "live_id" : "cbeebies"},
    "bbcnews": {"img_id" : "bbc_news24", "live_id" : "news_ch"},
    "bbcparliament": {"img_id" : "bbc_parliament_1", "live_id" : "parliament"},
    "bbcalba": {"img_id" : "bbc_alba", "live_id" : "alba"}
}

##########################################################################################
def NormalizeURL(url):
    return url

##########################################################################################
def MetadataObjectForURL(url):
    element = HTML.ElementFromURL(url, cacheTime = 0)

    for on_air_info in element.xpath("//*[@id = 'nownext']//*[@id = 'now']"):
        try:
            title = 'Live: ' + on_air_info.xpath(".//h2/text()")[0].strip()
        except:
            title = 'Live'

        try:
            time_info = on_air_info.xpath(".//*[@class = 'broadcast-time']//text()")[0].strip()
        except:
            time_info = ''
            
        try:
            subtitle = on_air_info.xpath(".//*[contains(@class = 'subtitle')]//text()")[0].strip()
        except:
            subtitle = ''
     
        try:
            description = on_air_info.xpath('.//*[contains(@class, "synopsis")]//text()')[0].strip()
        except:
            description = ''

        summary = time_info + '\r\n' + subtitle + '\r\n' + description

        thumb = None
        match = RE_CHANNEL.findall(url)
        if match:
            channel = match[0] 
            thumb = "http://www.bbc.co.uk/iplayer/img/tv/%s.jpg" % TV_CHANNEL_LOOKUP[channel]["img_id"] 
    
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb
        )
        
    return Ex.LiveMediaNotStarted

##########################################################################################
def MediaObjectsForURL(url):
    match = RE_CHANNEL.search(url)
    if match:
        channel = match.groups()[0]
        
        return [
            MediaObject(
                parts = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayVideo, channel = channel))
                    )
                ],
                video_resolution = 360,
                audio_channels = 2,
                optimized_for_streaming = True
            )
        ]

##########################################################################################
@indirect
def PlayVideo(channel):
    live_id = TV_CHANNEL_LOOKUP[channel]["live_id"]
    base    = String.Decode('aHR0cDovL3d3dy5iYmMuY28udWsvbWVkaWFzZWxlY3Rvci9wbGF5bGlzdHMvaGxzLyVzL2FrLyVzLm0zdTg=')

    try:
        hls_url = base % (String.Decode('aGR0dg=='), live_id)
        headers = HTTP.Request(hls_url).headers
    except:
        raise Ex.MediaGeoblocked

    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(url = hls_url)
    )
