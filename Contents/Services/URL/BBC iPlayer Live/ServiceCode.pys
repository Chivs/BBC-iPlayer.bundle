RE_CHANNEL         = Regex('iplayer/tv/([^/]+)/watchlive')
MEDIA_SELECTOR_URL = 'http://www.bbc.co.uk/mediaselector/playlists/hls/mobile_wifi/ak/%s.m3u8'

TV_CHANNEL_LOOKUP = {
    "bbc_one_london": {"img_id" : "bbc_one", "live_id" : "bbc1"},
    "bbc_two_england": {"img_id" : "bbc_two", "live_id" : "bbc2"},
    "bbc_three": {"img_id" : "bbc_three", "live_id" : "bbc3"},
    "bbc_four": {"img_id" : "bbc_four", "live_id" : "bbc4"},
    "cbbc": {"img_id" : "cbbc", "live_id" : "cbbc"},
    "cbeebies": {"img_id" : "cbeebies_1", "live_id" : "cbeebies"},
    "bbc_news24": {"img_id" : "bbc_news24", "live_id" : "news_ch"},
    "bbc_parliament": {"img_id" : "bbc_parliament_1", "live_id" : "parliament"},
    "bbc_alba": {"img_id" : "bbc_alba", "live_id" : "alba"}
}

##########################################################################################
def NormalizeURL(url):
    return url

##########################################################################################
def MetadataObjectForURL(url):
    page = HTML.ElementFromURL(url, cacheTime = 0)
    on_air = page.xpath('//div[@id = "currently-on-air"]')[0]

    title = on_air.xpath('.//h2[@class = "title"]/text()')[0]

    summary = on_air.xpath('.//div[contains(@class, "long-synopsis")]//text()')[0]
    if summary.endswith('('):
        summary = summary.rstrip('(').strip()

    thumb = None
    match = RE_CHANNEL.findall(url)
    if match:
        channel = match[0] 
        thumb = "http://www.bbc.co.uk/iplayer/img/tv/%s.jpg" % TV_CHANNEL_LOOKUP[channel]["img_id"] 

    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = thumb
    )

##########################################################################################
def MediaObjectsForURL(url):
    match = RE_CHANNEL.search(url)
    if match:
        channel = match.groups()[0]
        
        return [
            MediaObject(
                parts = [
                    PartObject(
                        key = HTTPLiveStreamURL(Callback(PlayVideo, channel = channel))
                    )
                ],
                video_resolution = 360,
                audio_channels = 2
            )
        ]

##########################################################################################
@indirect
def PlayVideo(channel):
    try:
        hls_url = MEDIA_SELECTOR_URL % TV_CHANNEL_LOOKUP[channel]["live_id"]
        headers = HTTP.Request(hls_url).headers
    except:
        raise Ex.MediaGeoblocked
        
    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(hls_url)
    )
